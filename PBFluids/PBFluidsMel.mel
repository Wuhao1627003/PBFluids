global proc makeWindow() 
{    
    global string $window;
    global string $radiusSlider;
    global string $viscositySlider;
    
    global string $deltaTSlider;
    global string $fluidDensitySlider;
    global string $numParticlesSlider;
    
    global string $widthSlider;
    global string $heightSlider;


    $window = `window -title "PB Fluids"`;
    	paneLayout -configuration "horizontal4";
    	
    	
    	    frameLayout -label "Particle Properties" -collapsable true -backgroundShade true -borderVisible false;
    			columnLayout;
    				$radiusSlider = `floatSliderGrp -label "Radius" -min 0.1 -max 10.0 -value 0.5 -field true`;
    				$viscositySlider = `floatSliderGrp -label "Viscosity" -min 1.0 -max 10.0 -value 1.0 -field true`;
    			setParent ..;
    		setParent ..;
    		
    		frameLayout -label "Simulation Setting" -collapsable true -backgroundShade true -borderVisible false;
    			columnLayout;
    				$deltaTSlider = `floatSliderGrp -label "Delta T" -min 0.1 -max 10.0 -value 0.2 -field true`;
    				$fluidDensitySlider = `floatSliderGrp -label "Fluid Density" -min 1.0 -max 10.0 -value 1.0 -field true`;
    				$numParticlesSlider = `intSliderGrp -label "Number of Particles" -min 10 -max 10000 -value 50 -field true`;
    			setParent ..;
    		setParent ..;
    		
    		frameLayout -label "Boundary Settings (Simulation Box)" -collapsable true -backgroundShade true -borderVisible false;
    			columnLayout;
    				$widthSlider = `intSliderGrp -label "Width" -min 10 -max 100 -value 10 -field true`;
    				$heightSlider = `intSliderGrp -label "Height" -min 10 -max 100 -value 10 -field true`;
    			setParent ..;
    			
    			rowLayout -numberOfColumns 1 -adjustableColumn 1 -columnAlign1 "left";
    			    text -label "Or, You Can Make Selected 3D Mesh As:" -align "left";
    			setParent ..;
    			
    			rowLayout -numberOfColumns 3 -adjustableColumn 2 -columnAlign3 "left" "center" "right";
        			button -label "Fluid Containers" - command "" -align "left";                               //!!!
        			text -label "" -align "center";
    			    button -label "Collision Objects" -command "" -align "right";                              //!!!
    		    setParent ..;
    			
    		setParent ..;
            
            frameLayout -label "Action" -collapsable false -backgroundShade true -borderVisible false;
    			rowLayout -numberOfColumns 6 -adjustableColumn 4 -columnAlign3 "left" "center" "right";
            		button -label "Generate" -command "onDynamicCreate" -align "left";
            		text -label "";
            		button -label "Clear" -command "onClear" -align "center";
            		text -label "";
            		button -label "Cancel" -command ("deleteUI -window " + $window) -align "right";
            		text -label "";          		    
    		    setParent ..;
    		    
    		    rowLayout -numberOfColumns 3 -adjustableColumn 2 -columnAlign3 "left" "center" "right";
            		button -label "Export Sequenece Frames" -command "" -align "left";                      //!!!
            		text -label "" -align "center";
            		button -label "Export Fluid Simulation Data" -command "" -align "right"; 		        //!!!
    		    setParent ..;
    		    
    	    setParent ..;    		
    		
    	setParent ..;
    showWindow $window;
}
//makeWindow();


global proc printConfirmations(float $radius, float $viscosity, float $deltaT, float $fluidDensity, int $numParticles, int $width, int $height) 
{
    print("Radius: " + $radius + "\n");
    print("Viscosity: " + $viscosity + "\n");
    
    print("Delta T: " + $deltaT + "\n");
    print("Fluid Density: " + $fluidDensity + "\n");
    print("Num of Particles: " + $numParticles + "\n");
    
    print("Width: " + $width + "\n");
    print("Height: " + $height + "\n");
    print("\n");
}

global proc onDynamicCreate()
{
    global string $window;
    global string $radiusSlider;
    global string $viscositySlider;
    
    global string $deltaTSlider;
    global string $fluidDensitySlider;
    global string $numParticlesSlider;
    
    global string $widthSlider;
    global string $heightSlider;

    float $radius = `floatSliderGrp -q -v $radiusSlider`;
    float $viscosity = `floatSliderGrp -q -v $viscositySlider`;
    
    float $deltaT = `floatSliderGrp -q -v $deltaTSlider`;
    float $fluidDensity = `floatSliderGrp -q -v $fluidDensitySlider`;
    int $numParticles = `intSliderGrp -q -v $numParticlesSlider`;
    
    int $width = `intSliderGrp -q -v $widthSlider`;
    int $height = `intSliderGrp -q -v $heightSlider`;

    print("Creating a dynamic PBFluids with the following inputs:");
    printConfirmations($radius, $viscosity, $deltaT, $fluidDensity, $numParticles, $width, $height);

    // Set up names
    string $PBFluidsName = "PBFluids";
    string $shapeName = "PBFluidsShape";
    string $nodeName = "PBFluidsNode";

    createNode transform -n $PBFluidsName;
    string $currShape = `createNode mesh -n $shapeName -p $PBFluidsName`;
    sets -add initialShadingGroup $currShape;

    // Adding the dynamic node
    string $currNode = `createNode MPBFluids -n $nodeName`;
    setAttr ($currNode + ".radius") $radius;
    setAttr ($currNode + ".density") $fluidDensity;
    setAttr ($currNode + ".viscosity") $viscosity;
    setAttr ($currNode + ".deltaT") $deltaT;
    connectAttr time1.outTime ($currNode + ".timeStep");
    setAttr ($currNode + ".numParticles") $numParticles;
    setAttr ($currNode + ".width") $width;
    setAttr ($currNode + ".height") $height;

    connectAttr ($currNode + ".outputGeometry") ($currShape + ".inMesh");

    polyCube -w 1 -h 1 -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1 -n pCube1;
    setAttr "pCube1.scaleX" $width;
    setAttr "pCube1.scaleZ" $width;
    setAttr "pCube1.scaleY" $height;
    setAttr "pCube1.translateX" ($width / 2.0);
    setAttr "pCube1.translateZ" ($width / 2.0);
    setAttr "pCube1.translateY" ($height / 2.0);
    select -r pCube1.f[1];
    doDelete;
    polyNormal -normalMode 0 -userNormalMode 0 -ch 1 pCube1.f[0:4];

    shadingNode -as lambert ;
    sets -r true -nss true -em -n lambert2SG ;
    connectAttr -f lambert2.outColor lambert2SG.surfaceShader ;
    setAttr lambert2.c -type double3 0 1 1 ;
    setAttr lambert2.transparency -type double3 .7 .7 .7 ;
    sets -e -fe lambert2SG $PBFluidsName ;

    deleteUI -window $window;
}

global proc onClear() {
    // Reset the scene
    print("Scene reset button pressed...\n");

    string $result = `confirmDialog -title "Clear Scene" 
        -message "Clear and reset entire scene?"
        -button "Yes" -button "No" 
        -cancelButton "No"-defaultButton "No"`;

    if ($result == "Yes") {
        file -f -new;
        print("Scene Reset\n");
    } else warning "Reset cancelled: scene preserved\n";
}

global string $gMainWindow;
setParent $gMainWindow;
menu -label "PBFluids" -p $gMainWindow -tearOff on;
menuItem -label "PBFluids Dialogue" -command ("makeWindow");
