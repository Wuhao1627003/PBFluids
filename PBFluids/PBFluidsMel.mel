global string $currContainerMesh;
global string $currNode;
global string $currPath;

global proc makeWindow() 
{    
    global string $nameObj_RN;
    global string $window;
    global string $massSlider;
    global string $radiusSlider;
    global string $viscositySlider;
    
    global string $deltaTSlider;
    global string $fluidDensitySlider;
    global string $numParticlesSlider;
    
    global string $widthSlider;
    global string $heightSlider;


    $window = `window -title "PB Fluids"`;
    frameLayout -label "Particle Properties" -collapsable true -backgroundShade true -borderVisible false;
    	columnLayout;
    		$massSlider = `floatSliderGrp -label "Mass" -min 0.1 -max 10.0 -value 1.0 -field true`;
    		$radiusSlider = `floatSliderGrp -label "Radius" -min 0.1 -max 10.0 -value 0.2 -field true`;
    		$viscositySlider = `floatSliderGrp -label "Viscosity" -min 1.0 -max 10.0 -value 1.0 -field true`;
    	setParent ..;
    setParent ..;
    		
    frameLayout -label "Simulation Setting" -collapsable true -backgroundShade true -borderVisible false;
    	columnLayout;
    		$deltaTSlider = `floatSliderGrp -label "Timestep Length" -min 1.0 -max 10.0 -value 2.0 -field true`;
    		$fluidDensitySlider = `floatSliderGrp -label "Fluid Density" -min 1.0 -max 10.0 -value 1.0 -field true`;
    		$numParticlesSlider = `intSliderGrp -label "Number of Particles" -min 10 -max 10000 -value 50 -field true`;
    	setParent ..;
    setParent ..;
    		
    frameLayout -label "Boundary Settings (Simulation Box)" -collapsable true -backgroundShade true -borderVisible false;
    	columnLayout;
    		$widthSlider = `intSliderGrp -label "Width" -min 5 -max 100 -value 10 -field true`;
    		$heightSlider = `intSliderGrp -label "Height" -min 5 -max 100 -value 10 -field true`;
    	setParent ..;
    setParent ..;

    frameLayout -label "Custom Meshes" -collapsable true -backgroundShade true -borderVisible false;
        rowLayout -numberOfColumns 1;
    		text -label "Select a 3D Mesh to set as:";
    	setParent ..;
    	rowLayout -numberOfColumns 4 -columnWidth4 60 90 40 150;
            text -label "";
        	button -label "Container" -command "setAsContainerMesh" -rs false;
            text -label "";
    		button -label "Initial Fluid" -command "decomposeSelectedMesh" -rs false;
    	setParent ..;
    setParent ..;
            
    rowLayout -numberOfColumns 3 -columnWidth3 150 150 150;
        button -label "Generate" -command "onDynamicCreate" -rs false -width 150;
        button -label "Export" -command "export" -rs false -width 150;  
        button -label "Cancel" -command ("deleteUI -window " + $window) -rs false -width 150;
    setParent ..;  		
    showWindow $window;
}

global proc setAsContainerMesh()
{
    global string $currContainerMesh;

    string $selected[] = `ls -selection`;
    int $listSize = `size $selected`;
    if ($listSize != 1)
    {
        confirmDialog -title "No or multiple meshes selected"
            -message "Please select ONE mesh as container"
            -button "Ok" 
            -cancelButton "Ok" -defaultButton "Ok";
    }
    else {
        string $meshName = $selected[0];

        if(`objExists $meshName`) 
        {
            polyTriangulate -ch 1 $meshName;
            $currContainerMesh = $meshName;
        }
        else
        {
            confirmDialog -title "Mesh doesn't exist" 
                -button "Ok" 
                -cancelButton "Ok" -defaultButton "Ok";
        }
    }
}

global proc decomposeSelectedMesh()
{
    global string $currNode;
    global string $currPath;
    
    string $selected[] = `ls -selection`;
    int $listSize = `size $selected`;
    if ($listSize != 1)
    {
        confirmDialog -title "No or multiple meshes selected" 
            -message "Please select ONE mesh to decompose"
            -button "Ok" 
            -cancelButton "Ok" -defaultButton "Ok";
    }
    else 
    {
        string $meshName = $selected[0];
    
        if(`objExists $meshName`) 
        {
            polyTriangulate -ch 1 $meshName;
        
            float $vtxPos[]; 
            int $fcount;
            int $vcount;
            int $nFaces[] = `polyEvaluate -face $meshName`;
            string $fileName = "vertexPositions.xyz";
            string $filePath = $currPath + $fileName;
                    
            // Open the output file for writing
            int $fileId = `fopen $filePath  "w"`;
            
            for ($fcount = 0; $fcount < $nFaces[0]; $fcount++)
			{
                $vtxPos = `xform -q -ws -t ($meshName + ".f[" + $fcount + "]")`;
				for ($vcount = 0; $vcount < 3; $vcount++)
                {
                    fprint $fileId ($vtxPos[$vcount * 3] + " " + $vtxPos[$vcount * 3 + 1] + " " + $vtxPos[$vcount * 3 + 2] + "\n");
                }
			}
    
            // Close the output file
            fclose $fileId;
            print("generated .xyz file");
        }
        else
        {
            confirmDialog -title "Mesh doesn't exist" 
                -button "Ok" 
                -cancelButton "Ok" -defaultButton "Ok";
        }
    }
}

global proc export()
{
    global string $currNode;
    global string $currPath;
    
    if (`objExists $currNode`)
    {
        playblast  -format avi -filename $currPath -forceOverwrite  -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 50 -compression "none" -quality 70;
        currentTime 120 ;
    }
    else
    {
        confirmDialog -title "Not Node Existed Yet" 
            -message "No PBFluids node existed Yet, Please generate the node first."
            -button "Ok" 
            -cancelButton "Ok" -defaultButton "Ok";
    }
}

global proc printConfirmations(float $mass, float $radius, float $viscosity, float $deltaT, float $fluidDensity, int $numParticles, int $width, int $height) 
{
    print("Mass: " + $mass + "\n");
    print("Radius: " + $radius + "\n");
    print("Viscosity: " + $viscosity + "\n");
    
    print("Delta T: " + $deltaT + "\n");
    print("Fluid Density: " + $fluidDensity + "\n");
    print("Num of Particles: " + $numParticles + "\n");
    
    print("Width: " + $width + "\n");
    print("Height: " + $height + "\n");
    print("\n");
}

global proc onDynamicCreate()
{    
    global string $currNode;

    global string $window;
    global string $massSlider;
    global string $radiusSlider;
    global string $viscositySlider;
    
    global string $deltaTSlider;
    global string $fluidDensitySlider;
    global string $numParticlesSlider;
    
    global string $widthSlider;
    global string $heightSlider;
    
    global string $currContainerMesh;
    
    if (`objExists $currNode`)
    {
        confirmDialog -title "Node Already Existed" 
            -message "You have already created a PBFluids Node. Please click the clear button to delete the PBFluids Node first!!! Or you can directly change the value of the Node."
            -button "Ok" 
            -cancelButton "Ok" -defaultButton "Ok";
    }
    else 
    {
        float $mass = `floatSliderGrp -q -v $massSlider`;
        float $radius = `floatSliderGrp -q -v $radiusSlider`;
        float $viscosity = `floatSliderGrp -q -v $viscositySlider`;
        
        float $deltaT = `floatSliderGrp -q -v $deltaTSlider`;
        float $fluidDensity = `floatSliderGrp -q -v $fluidDensitySlider`;
        int $numParticles = `intSliderGrp -q -v $numParticlesSlider`;
        
        int $width = `intSliderGrp -q -v $widthSlider`;
        int $height = `intSliderGrp -q -v $heightSlider`;
    
        print("Creating a dynamic PBFluids with the following inputs:\n");
        printConfirmations($mass, $radius, $viscosity, $deltaT, $fluidDensity, $numParticles, $width, $height);
    
        // Set up names
        string $PBFluidsName = "PBFluids";
        string $shapeName = "PBFluidsShape";
        string $nodeName = "PBFluidsNode";
    
        createNode transform -n $PBFluidsName;
        string $currShape = `createNode mesh -n $shapeName -p $PBFluidsName`;
        sets -add initialShadingGroup $currShape;
    
        // Adding the dynamic node
        $currNode = `createNode MPBFluids -n $nodeName`;
        connectAttr ($currNode + ".outputGeometry") ($currShape + ".inMesh");
        connectAttr time1.outTime ($currNode + ".timeStep");
        setAttr ($currNode + ".mass") $mass;
        setAttr ($currNode + ".radius") $radius;
        setAttr ($currNode + ".density") $fluidDensity;
        setAttr ($currNode + ".viscosity") $viscosity;
        setAttr ($currNode + ".deltaT") $deltaT;
        setAttr ($currNode + ".numParticles") $numParticles;
        setAttr ($currNode + ".width") $width;
        setAttr ($currNode + ".height") $height;

        if (`objExists $currContainerMesh`)
            {
                connectAttr ($currContainerMesh + ".worldMesh")($currNode + ".container");
                print("Set container mesh: " + $currContainerMesh + "\n");
            }
        //deleteUI -window $window;
    }
}

global proc setCurrPath(string $s)
{
    global string $currPath;
    $currPath = $s;
    print("Current Path: " + $currPath + "\n");
}


global string $gMainWindow;
setParent $gMainWindow;
menu -label "PBFluids" -p $gMainWindow -tearOff on;
menuItem -label "PBFluids Dialogue" -command ("makeWindow");
